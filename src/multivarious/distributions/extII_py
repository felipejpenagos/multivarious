# multivarious/distributions/extreme_value_II.py

import numpy as np

def pdf(x, m, s, k):
    """
    PDF of Extreme Value Type II (Fréchet) distribution.
    """
    z = (x - m) / s
    pdf = (k / s) * z**(-1 - k) * np.exp(-z**(-k))
    pdf = np.where(x <= m, 0.0, pdf)
    return np.real(pdf)


def cdf(x, param):
    """
    CDF of Extreme Value Type II (Fréchet) distribution.
    """
    m, s, k = param
    z = (x - m) / s
    cdf = np.exp(-z**(-k))
    cdf = np.where(x <= m, 0.0, cdf)
    return np.real(cdf)


def inv(p, m, s, k):
    """
    Inverse CDF (quantile function) of the Fréchet distribution.
    """
    p = np.clip(p, np.finfo(float).eps, 1 - np.finfo(float).eps)
    return m + s * (-np.log(p))**(-1 / k)


def rnd(mX, sX, kX, r, c=None):
    """
    Generate samples from the Fréchet (Extreme Value Type II) distribution.
    """
    if np.any(np.asarray(mX) < 0) or np.any(np.isinf(mX)):
        raise ValueError("mX must be > 0 and finite")
    if np.any(np.asarray(sX) <= 0) or np.any(np.isinf(sX)):
        raise ValueError("sX must be > 0 and finite")

    if c is None:
        u = np.asarray(r)
    else:
        u = np.random.rand(r, c)

    mX = np.broadcast_to(mX, u.shape)
    sX = np.broadcast_to(sX, u.shape)
    kX = np.broadcast_to(kX, u.shape)

    return mX + sX * (-np.log(u))**(-1 / kX)
